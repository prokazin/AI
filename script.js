// script.js ‚Äî frontend module (ESM)
// –ü–û–õ–ù–û–ï –†–ê–ë–û–ß–ï–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï —Å Firebase Realtime DB (–ª–∏–¥–µ—Ä–±–æ—Ä–¥).
// –ó–ê–ú–ï–ù–ò–¢–ï FIREBASE_CONFIG –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase Console.

import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
import { getDatabase, ref, set, onValue, query, orderByChild, limitToLast, get } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-database.js";

/* ================== –í–°–¢–ê–í–¨ –°–í–û–ô FIREBASE CONFIG ==================
–í Firebase Console -> Project settings -> SDK -> Realtime Database (–∏–ª–∏ Web app)
–°–∫–æ–ø–∏—Ä—É–π –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—é–¥–∞.
================================================================== */
const FIREBASE_CONFIG = {
  apiKey: "YOUR_FIREBASE_API_KEY",
  authDomain: "YOUR_PROJECT.firebaseapp.com",
  databaseURL: "https://YOUR_PROJECT.firebaseio.com",
  projectId: "YOUR_PROJECT",
  storageBucket: "YOUR_PROJECT.appspot.com",
  messagingSenderId: "YOUR_SENDER_ID",
  appId: "YOUR_APP_ID"
};
/* ================================================================= */

const app = initializeApp(FIREBASE_CONFIG);
const db = getDatabase(app);

// ---- Game state ----
let coins = parseInt(localStorage.getItem("coins") || "0", 10);
let coinsPerClick = parseFloat(localStorage.getItem("cpc") || "1");
let autoClick = parseFloat(localStorage.getItem("auto") || "0");
let level = parseInt(localStorage.getItem("level") || "1", 10);
let isPremium = false; // —Å—Ç–∞–≤–∏–º –≤ false, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ Firebase

const coinsDisplay = document.getElementById("coins");
const levelDisplay = document.getElementById("level");
const coinImg = document.getElementById("coin");
const shopDiv = document.getElementById("shop");
const memeShopDiv = document.getElementById("meme-shop");
const achievementsList = document.getElementById("achievements");
const leaderboardList = document.getElementById("leaderboard");
const playerNameEl = document.getElementById("playerName");

// Telegram WebApp user
let tg = window.Telegram?.WebApp;
if (tg && tg.expand) tg.expand();
const player = tg?.initDataUnsafe?.user || { first_name: "–ê–Ω–æ–Ω–∏–º", id: 0 };
const playerId = player.id || 0;
let playerName = (player.first_name || "–ê–Ω–æ–Ω–∏–º") + (isPremium ? " ‚≠ê" : "");
playerNameEl.textContent = playerName;

// ---- Upgrades ----
const upgrades = [
  { id: "laptop", name: "üíª –ù–æ—É—Ç–±—É–∫", cost: 10, type: "click", value: 1 },
  { id: "pc", name: "üñ•Ô∏è –ì–µ–π–º–µ—Ä—Å–∫–∏–π –ü–ö", cost: 50, type: "click", value: 5 },
  { id: "garage", name: "üóÑÔ∏è –°–µ—Ä–≤–µ—Ä –≤ –≥–∞—Ä–∞–∂–µ", cost: 100, type: "auto", value: 1 },
  { id: "dc", name: "üè¢ –î–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä", cost: 500, type: "auto", value: 10 },
  { id: "gpt", name: "ü§ñ GPT++", cost: 2000, type: "click-mult", value: 2 },
  { id: "ipo", name: "üìà IPO", cost: 10000, type: "global-mult", value: 2 }
];

const memeUpgrades = [
  { id: "scamcoin", name: "ü™ô –°–∫–∞–º-—Ç–æ–∫–µ–Ω (–º–µ–º)", cost: 300, type: "click", value: 10 },
  { id: "tiktok_investor", name: "üì± –ò–Ω–≤–µ—Å—Ç–æ—Ä –∏–∑ TikTok", cost: 750, type: "auto", value: 25 },
  { id: "ai_cat", name: "üò∫ –ò–ò-–∫–æ—Ç (—ç–∫—Å–∫–ª—é–∑–∏–≤)", cost: 2000, type: "click-mult", value: 2, premiumOnly: true },
];

// ---- Helpers ----
function saveLocal() {
  localStorage.setItem("coins", Math.floor(coins));
  localStorage.setItem("cpc", coinsPerClick);
  localStorage.setItem("auto", autoClick);
  localStorage.setItem("level", level);
}

function updateUI() {
  coinsDisplay.textContent = Math.floor(coins);
  levelDisplay.textContent = level;
  playerNameEl.textContent = (player.first_name || "–ê–Ω–æ–Ω–∏–º") + (isPremium ? " ‚≠ê" : "");
  saveLocal();
}

// Achievements
function addAchievement(text) {
  const li = document.createElement("li");
  li.className = "ach-badge";
  li.textContent = text;
  achievementsList.appendChild(li);
}

// Spawn floating token
function spawnTokenEffect(x, y, amount) {
  const node = document.createElement("div");
  node.className = "token-float";
  node.style.left = `${x}px`;
  node.style.top = `${y}px`;
  node.textContent = `+${amount}`;
  document.body.appendChild(node);
  setTimeout(() => node.remove(), 1000);
}

// ---- Shop / buy ----
function buyUpgrade(item) {
  if (item.premiumOnly && !isPremium) {
    addAchievement("üîí –ù—É–∂–Ω–æ –ü—Ä–µ–º–∏—É–º –¥–ª—è: " + item.name);
    return;
  }
  if (coins < item.cost) {
    addAchievement("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è " + item.name);
    return;
  }
  coins -= item.cost;
  if (item.type === "click") coinsPerClick += item.value;
  if (item.type === "auto") autoClick += item.value;
  if (item.type === "click-mult") coinsPerClick *= item.value;
  if (item.type === "global-mult") { coinsPerClick *= item.value; autoClick *= item.value; }
  addAchievement("–ö—É–ø–ª–µ–Ω: " + item.name);
  updateUI();
  saveScoreToFirebase();
}

function renderShop() {
  shopDiv.innerHTML = "";
  upgrades.forEach(u => {
    const btn = document.createElement("button");
    btn.className = "shop-btn";
    btn.textContent = `${u.name} ‚Äî ${u.cost}ü™ô`;
    btn.onclick = () => buyUpgrade(u);
    shopDiv.appendChild(btn);
  });
  memeShopDiv.innerHTML = "";
  memeUpgrades.forEach(m => {
    const btn = document.createElement("button");
    btn.className = "shop-btn";
    btn.textContent = `${m.name} ‚Äî ${m.cost}ü™ô` + (m.premiumOnly ? " (–ü—Ä–µ–º–∏—É–º)" : "");
    btn.onclick = () => buyUpgrade(m);
    memeShopDiv.appendChild(btn);
  });
}

// ---- Click handling ----
coinImg.addEventListener("click", (e) => {
  const crit = Math.random() < 0.12; // 12% crit chance
  const multiplier = crit ? (2 + Math.floor(Math.random() * 4)) : 1; // x2-x5
  const gainBase = coinsPerClick * (isPremium ? 1.5 : 1);
  const gain = Math.floor(gainBase * multiplier);
  coins += gain;
  spawnTokenEffect(e.pageX, e.pageY, gain);
  updateUI();
  saveScoreToFirebase();
});

// ---- Autoclick ----
setInterval(() => {
  const gain = autoClick * (isPremium ? 1.5 : 1);
  if (gain > 0) {
    coins += gain;
    updateUI();
    saveScoreToFirebase();
  }
}, 1000);

// ---- Levels ----
function checkLevelUp() {
  const nextLevel = Math.floor(Math.log2(coins + 1)) + 1;
  if (nextLevel > level) {
    level = nextLevel;
    addAchievement(`üéâ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${level}`);
    updateUI();
  }
}
setInterval(checkLevelUp, 2000);

// ---- Firebase leaderboard ----
function saveScoreToFirebase() {
  if (!playerId) return; // –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º id
  const playerRef = ref(db, "players/" + playerId);
  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º: id, name, coins, level, premium (0/1)
  set(playerRef, {
    id: playerId,
    name: player.first_name || "–ê–Ω–æ–Ω–∏–º",
    coins: Math.floor(coins),
    level: level,
    premium: isPremium ? 1 : 0
  }).catch(err => console.warn("Firebase save error:", err));
}

function loadLeaderboard() {
  const topPlayers = query(ref(db, "players"), orderByChild("coins"), limitToLast(10));
  onValue(topPlayers, (snapshot) => {
    const arr = [];
    snapshot.forEach(child => arr.push(child.val()));
    arr.sort((a,b) => b.coins - a.coins);
    leaderboardList.innerHTML = "";
    arr.forEach((p, i) => {
      const li = document.createElement("li");
      li.textContent = `${i+1}. ${p.name}${p.premium ? " ‚≠ê" : ""} ‚Äî ${p.coins}ü™ô (LVL ${p.level})`;
      leaderboardList.appendChild(li);
    });
  });
}

// ---- Premium check (read from Firebase) ----
// –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–∫–ª—é—á–∞—Ç—å –ø—Ä–µ–º–∏—É–º –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ Firebase Console, —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∏—Ç —ç—Ç–æ –∑–¥–µ—Å—å:
async function refreshPremiumFromFirebase() {
  if (!playerId) return;
  try {
    const snap = await get(ref(db, "players/" + playerId));
    const val = snap.val();
    if (val && val.premium) {
      isPremium = true;
    } else {
      isPremium = false;
    }
    updateUI();
  } catch (err) {
    console.warn("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º–∞:", err);
  }
}
setInterval(refreshPremiumFromFirebase, 15000);

// ---- Init ----
renderShop();
updateUI();
loadLeaderboard();
saveScoreToFirebase();
refreshPremiumFromFirebase();
